{
  "collection": {
    "_": {
      "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
      "exporter_id": "25346390"
    },
    "item": [
      {
        "id": "67a57868-6f67-42be-abb3-d38d69934235",
        "name": "DemoRequest",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [
              {
                "key": "page",
                "value": "2"
              }
            ],
            "variable": []
          },
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "\r",
                "//let jsonvariable =JSON.parse(responseBody);\r",
                "//const jsonvariaable = JSON.parse(responseBody);\r",
                "\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
              "type": "text/javascript",
              "exec": [
                "console.log(\"Pre-Request Script\");\r",
                "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                "pm.variables.set(\"LocalVariable\",\"in\")\r",
                ""
              ],
              "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
        "name": "Unique_user_Request",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "9"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
            }
          }
        ]
      },
      {
        "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
        "name": "Post_method",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "23"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
            }
          }
        ]
      },
      {
        "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
        "name": "PUT_method",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
            }
          }
        ]
      },
      {
        "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
        "name": "patch_Request",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
            }
          }
        ]
      },
      {
        "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
        "name": "Delete_Request",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "7"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
              "type": "text/javascript",
              "exec": [
                "// var jsonvariable = JSON.parse(responseBody);\r",
                "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "// console.log(jsonvariable.total);\r",
                "// console.log(jsonvariable.page);\r",
                "// console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                "\r",
                "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "// pm.test(\"status code validation API Testing\",function() {\r",
                "//     pm.response.to.have.status == 200;\r",
                "// });\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "// pm.test(\"validate the response code\",()=>{\r",
                "//     pm.response.to.have.status ==200;\r",
                "// });\r",
                "\r",
                "\r",
                "\r",
                "// pm.test(\"Content- Encoding validation\",function(){\r",
                "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                "// });\r",
                "\r",
                "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "// });\r",
                "// // pm.test(\"validate the cookies value\",()=>{\r",
                "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "// });\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "DomainClloectionvariable"
      },
      {
        "type": "any",
        "value": "",
        "key": "total_pages"
      }
    ],
    "info": {
      "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
      "name": "Collection_level_Runner",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "323ec2bd-21bb-4992-82cb-aeedd16099e6",
    "values": []
  },
  "globals": {
    "id": "0d93f8cf-8137-4e76-b37d-2ffeba40b682",
    "values": [
      {
        "type": "any",
        "value": "https",
        "key": "URLGlobalVariable"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 13
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 359.5,
      "responseMin": 310,
      "responseMax": 518,
      "responseSd": 71.92299122441077,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702126376322,
      "completed": 1702126379042
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "85b46283-d8e3-403e-9deb-eef7e217656c",
          "httpRequestId": "31ad2942-0f5b-4914-9452-0246b05d02cb"
        },
        "item": {
          "id": "67a57868-6f67-42be-abb3-d38d69934235",
          "name": "DemoRequest",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "\r",
                  "//let jsonvariable =JSON.parse(responseBody);\r",
                  "//const jsonvariaable = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Pre-Request Script\");\r",
                  "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                  "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                  "pm.variables.set(\"LocalVariable\",\"in\")\r",
                  ""
                ],
                "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [
              {
                "key": "page",
                "value": "2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d4d9eeb5-6ec2-4dbe-af3c-d13660e15772",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": {
          "id": "cc3e5598-c6dd-4b84-9b5a-bbdbdd499791",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 09 Dec 2023 12:52:55 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701745950&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=K7L4Md1WVeLVB%2B8tN0WJRza0lSP%2FKMgRsUX1bMizDzs%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701745950&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=K7L4Md1WVeLVB%2B8tN0WJRza0lSP%2FKMgRsUX1bMizDzs%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"406-ut0vzoCuidvyMf8arZpMpJ6ZRDw\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "CF-Cache-Status",
              "value": "HIT"
            },
            {
              "key": "Age",
              "value": "1596"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "832d6355d887f38c-BOM"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              50,
              44,
              34,
              112,
              101,
              114,
              95,
              112,
              97,
              103,
              101,
              34,
              58,
              54,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              95,
              112,
              97,
              103,
              101,
              115,
              34,
              58,
              50,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              109,
              105,
              99,
              104,
              97,
              101,
              108,
              46,
              108,
              97,
              119,
              115,
              111,
              110,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              104,
              97,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              97,
              119,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              55,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              56,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              108,
              105,
              110,
              100,
              115,
              97,
              121,
              46,
              102,
              101,
              114,
              103,
              117,
              115,
              111,
              110,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              100,
              115,
              97,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              101,
              114,
              103,
              117,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              56,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              111,
              98,
              105,
              97,
              115,
              46,
              102,
              117,
              110,
              107,
              101,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              111,
              98,
              105,
              97,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              117,
              110,
              107,
              101,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              57,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              48,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              121,
              114,
              111,
              110,
              46,
              102,
              105,
              101,
              108,
              100,
              115,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              121,
              114,
              111,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              115,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              48,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              49,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              103,
              101,
              111,
              114,
              103,
              101,
              46,
              101,
              100,
              119,
              97,
              114,
              100,
              115,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              101,
              111,
              114,
              103,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              100,
              119,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              49,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              50,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              114,
              97,
              99,
              104,
              101,
              108,
              46,
              104,
              111,
              119,
              101,
              108,
              108,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              97,
              99,
              104,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              111,
              119,
              101,
              108,
              108,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              50,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              35,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              45,
              104,
              101,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              111,
              32,
              107,
              101,
              101,
              112,
              32,
              82,
              101,
              113,
              82,
              101,
              115,
              32,
              102,
              114,
              101,
              101,
              44,
              32,
              99,
              111,
              110,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              119,
              97,
              114,
              100,
              115,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              99,
              111,
              115,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              114,
              101,
              99,
              105,
              97,
              116,
              101,
              100,
              33,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 518,
          "responseSize": 1030
        },
        "id": "67a57868-6f67-42be-abb3-d38d69934235",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:1)"
            }
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8c22a1c9-65b2-43d1-aa34-b835bfffe0a9",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "85dcc906-8f7a-459b-b226-c65cafc08946"
        },
        "item": {
          "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
          "name": "Unique_user_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "9"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "9"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f160a4e-7db5-4b37-bbb6-9102018e6e46",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d0245137-b185-4e53-859d-d6c74c079698",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 09 Dec 2023 12:52:55 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1702126375&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=OysjI71kwhDpez%2BMjjGaFJzAXvv3FXLkOy%2BtUtxmZxQ%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1702126375&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=OysjI71kwhDpez%2BMjjGaFJzAXvv3FXLkOy%2BtUtxmZxQ%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"118-h4/j+GWuEpfnmJgxhE5HWX+/QC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "CF-Cache-Status",
              "value": "EXPIRED"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "832d6356ca38f38c-BOM"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              111,
              98,
              105,
              97,
              115,
              46,
              102,
              117,
              110,
              107,
              101,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              111,
              98,
              105,
              97,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              117,
              110,
              107,
              101,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              57,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              35,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              45,
              104,
              101,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              111,
              32,
              107,
              101,
              101,
              112,
              32,
              82,
              101,
              113,
              82,
              101,
              115,
              32,
              102,
              114,
              101,
              101,
              44,
              32,
              99,
              111,
              110,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              119,
              97,
              114,
              100,
              115,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              99,
              111,
              115,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              114,
              101,
              99,
              105,
              97,
              116,
              101,
              100,
              33,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 322,
          "responseSize": 280
        },
        "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:2)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "962205bd-ba13-4028-a458-15d507f8d5ad",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6676bec3-a743-4d7a-93f2-4d58c88ad484"
        },
        "item": {
          "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "23"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b15329bd-d20e-49f3-b49a-75b5006dcf40",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "2e931be9-166c-4162-9972-3b767cf774eb",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 09 Dec 2023 12:52:56 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "87"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1702126376&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PG4V0NQfFS71Bt1FLTv4y50sM0lf0e41MJykZKMtILg%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1702126376&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PG4V0NQfFS71Bt1FLTv4y50sM0lf0e41MJykZKMtILg%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"57-9Kj6XfZprjvPSZX5tbZHGxf6b1M\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "832d63595f32f38c-BOM"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              97,
              118,
              101,
              101,
              110,
              34,
              44,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              50,
              50,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              50,
              45,
              48,
              57,
              84,
              49,
              50,
              58,
              53,
              50,
              58,
              53,
              54,
              46,
              49,
              51,
              51,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 351,
          "responseSize": 87
        },
        "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Content- Encoding validation",
              "message": "expected response to have header with key 'Content-Encoding'",
              "stack": "AssertionError: expected response to have header with key 'Content-Encoding'\n   at Object.eval sandbox-script.js:5:3)"
            }
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "validate the Content-Encoding value",
              "message": "expected undefined to deeply equal 'br'",
              "stack": "AssertionError: expected undefined to deeply equal 'br'\n   at Object.eval sandbox-script.js:6:3)"
            }
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:3)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Validate the Status Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:3)"
            }
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "81f204b0-7165-46f2-a46d-024be5f64236",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "11eecb52-34cc-44af-b999-af00dc4b2f26"
        },
        "item": {
          "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
          "name": "PUT_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a526bf3e-d313-4526-a524-9804e06e4b50",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "60",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "13db8a28-053e-4ea7-94c9-6ee4f3d4806b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 09 Dec 2023 12:52:56 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1702126376&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PG4V0NQfFS71Bt1FLTv4y50sM0lf0e41MJykZKMtILg%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1702126376&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PG4V0NQfFS71Bt1FLTv4y50sM0lf0e41MJykZKMtILg%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"53-bsquWxx/EIXPoFkEWUiSbQgCOf0\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "832d635c0d13f38c-BOM"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              97,
              118,
              101,
              101,
              110,
              34,
              44,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              65,
              117,
              116,
              111,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              50,
              45,
              48,
              57,
              84,
              49,
              50,
              58,
              53,
              50,
              58,
              53,
              54,
              46,
              53,
              52,
              51,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 329,
          "responseSize": 83
        },
        "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:4)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e1904f49-aa69-40b2-9132-cd887e8caa06",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "812e19cb-0d64-46de-bfab-ee15ea25c807"
        },
        "item": {
          "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
          "name": "patch_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5622b916-a54c-4eb3-901a-2ded94d807aa",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "33",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "da9a88e1-7031-458b-aed0-ca11160d3c49",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 09 Dec 2023 12:52:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1702126376&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PG4V0NQfFS71Bt1FLTv4y50sM0lf0e41MJykZKMtILg%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1702126376&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PG4V0NQfFS71Bt1FLTv4y50sM0lf0e41MJykZKMtILg%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"3f-8/AFZf5HpXlzDqYzjW5ZJs5z1os\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "832d635ebb4cf38c-BOM"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              109,
              97,
              110,
              117,
              97,
              108,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              50,
              45,
              48,
              57,
              84,
              49,
              50,
              58,
              53,
              50,
              58,
              53,
              54,
              46,
              57,
              54,
              55,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 327,
          "responseSize": 63
        },
        "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:5)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2974266f-4dc7-4c64-8e00-9d5cc25a72c3",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8361ffd6-3dfd-47e5-a741-d4cba62df680"
        },
        "item": {
          "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
          "name": "Delete_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "7"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                "type": "text/javascript",
                "exec": [
                  "// var jsonvariable = JSON.parse(responseBody);\r",
                  "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "// console.log(jsonvariable.total);\r",
                  "// console.log(jsonvariable.page);\r",
                  "// console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                  "\r",
                  "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "// pm.test(\"status code validation API Testing\",function() {\r",
                  "//     pm.response.to.have.status == 200;\r",
                  "// });\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "// pm.test(\"validate the response code\",()=>{\r",
                  "//     pm.response.to.have.status ==200;\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "\r",
                  "// pm.test(\"Content- Encoding validation\",function(){\r",
                  "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "// });\r",
                  "// // pm.test(\"validate the cookies value\",()=>{\r",
                  "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "7"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0e332699-ff9f-4a86-9ea2-056a688d2b11",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "f8b8c28e-218e-4f24-8ced-a17decbc3283",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 09 Dec 2023 12:52:57 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1702126377&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=R6NcQiqWMsI6f4A9cU1nMnlRdEE3jFJlGNoVVSgKVuU%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1702126377&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=R6NcQiqWMsI6f4A9cU1nMnlRdEE3jFJlGNoVVSgKVuU%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "832d636178f8f38c-BOM"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 310,
          "responseSize": 0
        },
        "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
        "assertions": [
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "validate the header",
              "message": "expected undefined to deeply equal 'application/json; charset=utf-8'",
              "stack": "AssertionError: expected undefined to deeply equal 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1543
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:1)",
          "checksum": "e4cdd3a64bc58d7030a83465339ec173",
          "id": "6d4b8237-56a9-4a53-aa6e-5871c3f91455",
          "timestamp": 1702126376937,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "67a57868-6f67-42be-abb3-d38d69934235",
          "name": "DemoRequest",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "\r",
                  "//let jsonvariable =JSON.parse(responseBody);\r",
                  "//const jsonvariaable = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Pre-Request Script\");\r",
                  "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                  "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                  "pm.variables.set(\"LocalVariable\",\"in\")\r",
                  ""
                ],
                "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "85b46283-d8e3-403e-9deb-eef7e217656c",
          "httpRequestId": "31ad2942-0f5b-4914-9452-0246b05d02cb",
          "scriptId": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
          "execution": "630e4291-aff6-431a-aeee-b982e661e638"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:1)",
          "checksum": "cedf0163b51420fc23550f94708897da",
          "id": "d0a2af6b-e7fc-4929-9ffb-d0dcf1e74830",
          "timestamp": 1702126376940,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "67a57868-6f67-42be-abb3-d38d69934235",
          "name": "DemoRequest",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "\r",
                  "//let jsonvariable =JSON.parse(responseBody);\r",
                  "//const jsonvariaable = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Pre-Request Script\");\r",
                  "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                  "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                  "pm.variables.set(\"LocalVariable\",\"in\")\r",
                  ""
                ],
                "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "85b46283-d8e3-403e-9deb-eef7e217656c",
          "httpRequestId": "31ad2942-0f5b-4914-9452-0246b05d02cb",
          "scriptId": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
          "execution": "630e4291-aff6-431a-aeee-b982e661e638"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:2)",
          "checksum": "91f532fcf65ce897ad665f78ae2987fc",
          "id": "d782a049-493a-41bb-8189-e827ecf3f425",
          "timestamp": 1702126377330,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
          "name": "Unique_user_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "9"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8c22a1c9-65b2-43d1-aa34-b835bfffe0a9",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "85dcc906-8f7a-459b-b226-c65cafc08946",
          "scriptId": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
          "execution": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:2)",
          "checksum": "ed7524a926d518d6a33bdd404826ddb0",
          "id": "82d17702-fc0a-45e3-977c-47511114e1d4",
          "timestamp": 1702126377331,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
          "name": "Unique_user_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "9"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8c22a1c9-65b2-43d1-aa34-b835bfffe0a9",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "85dcc906-8f7a-459b-b226-c65cafc08946",
          "scriptId": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
          "execution": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Content- Encoding validation",
          "message": "expected response to have header with key 'Content-Encoding'",
          "stack": "AssertionError: expected response to have header with key 'Content-Encoding'\n   at Object.eval sandbox-script.js:5:3)",
          "checksum": "d900a3395f2ba2b825c0aecb3c80c822",
          "id": "e849aa52-3e1e-4121-bf28-6df33b602235",
          "timestamp": 1702126377768,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "962205bd-ba13-4028-a458-15d507f8d5ad",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6676bec3-a743-4d7a-93f2-4d58c88ad484",
          "scriptId": "a405f982-1c74-4611-8b07-8c32b261fdf9",
          "execution": "129143ce-f7d4-497e-9199-2d738245f09d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "validate the Content-Encoding value",
          "message": "expected undefined to deeply equal 'br'",
          "stack": "AssertionError: expected undefined to deeply equal 'br'\n   at Object.eval sandbox-script.js:6:3)",
          "checksum": "8c7d8933680777402b36a3b4be36d814",
          "id": "7f06f26c-7342-4db2-81a3-6ca4972f6d80",
          "timestamp": 1702126377770,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "962205bd-ba13-4028-a458-15d507f8d5ad",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6676bec3-a743-4d7a-93f2-4d58c88ad484",
          "scriptId": "a405f982-1c74-4611-8b07-8c32b261fdf9",
          "execution": "129143ce-f7d4-497e-9199-2d738245f09d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:3)",
          "checksum": "3a6dfa8008a1faf5424716ce71aef86e",
          "id": "292f8aca-d741-475f-a156-18797426affc",
          "timestamp": 1702126377771,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "962205bd-ba13-4028-a458-15d507f8d5ad",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6676bec3-a743-4d7a-93f2-4d58c88ad484",
          "scriptId": "a405f982-1c74-4611-8b07-8c32b261fdf9",
          "execution": "129143ce-f7d4-497e-9199-2d738245f09d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Validate the Status Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:3)",
          "checksum": "144c027096a24e67757b1f10cb0bf11a",
          "id": "8f011698-a9e9-4293-bf26-85ddfe86c044",
          "timestamp": 1702126377772,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "962205bd-ba13-4028-a458-15d507f8d5ad",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6676bec3-a743-4d7a-93f2-4d58c88ad484",
          "scriptId": "a405f982-1c74-4611-8b07-8c32b261fdf9",
          "execution": "129143ce-f7d4-497e-9199-2d738245f09d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:4)",
          "checksum": "8163ac6647a5f6b3861fdce20c0511f0",
          "id": "75c508da-b08d-4f6d-b014-2440e61684dd",
          "timestamp": 1702126378189,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
          "name": "PUT_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "81f204b0-7165-46f2-a46d-024be5f64236",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "11eecb52-34cc-44af-b999-af00dc4b2f26",
          "scriptId": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
          "execution": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:4)",
          "checksum": "5d64a80bcb6d2f90999e246a20e532f3",
          "id": "7b57ae67-6397-4d0a-9ea2-6723e6938c0f",
          "timestamp": 1702126378191,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
          "name": "PUT_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "81f204b0-7165-46f2-a46d-024be5f64236",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "11eecb52-34cc-44af-b999-af00dc4b2f26",
          "scriptId": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
          "execution": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:5)",
          "checksum": "ea7cbdcfa0e3e7847c32f32b84f34efb",
          "id": "4043170c-8a25-42bf-9c7f-14e8ffa570f9",
          "timestamp": 1702126378617,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
          "name": "patch_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "e1904f49-aa69-40b2-9132-cd887e8caa06",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "812e19cb-0d64-46de-bfab-ee15ea25c807",
          "scriptId": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
          "execution": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:5)",
          "checksum": "6b8d4ca734d1307b6d13072f55b40a28",
          "id": "03fcf294-6cb3-4770-a781-8b421dff80cc",
          "timestamp": 1702126378619,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
          "name": "patch_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "e1904f49-aa69-40b2-9132-cd887e8caa06",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "812e19cb-0d64-46de-bfab-ee15ea25c807",
          "scriptId": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
          "execution": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "validate the header",
          "message": "expected undefined to deeply equal 'application/json; charset=utf-8'",
          "stack": "AssertionError: expected undefined to deeply equal 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d6c237421abe4af9023f4c21de3bfc9e",
          "id": "df758d8a-f27a-407d-a0a0-7da630829afd",
          "timestamp": 1702126379020,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
          "name": "Delete_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "7"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                "type": "text/javascript",
                "exec": [
                  "// var jsonvariable = JSON.parse(responseBody);\r",
                  "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "// console.log(jsonvariable.total);\r",
                  "// console.log(jsonvariable.page);\r",
                  "// console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                  "\r",
                  "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "// pm.test(\"status code validation API Testing\",function() {\r",
                  "//     pm.response.to.have.status == 200;\r",
                  "// });\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "// pm.test(\"validate the response code\",()=>{\r",
                  "//     pm.response.to.have.status ==200;\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "\r",
                  "// pm.test(\"Content- Encoding validation\",function(){\r",
                  "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "// });\r",
                  "// // pm.test(\"validate the cookies value\",()=>{\r",
                  "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "67a57868-6f67-42be-abb3-d38d69934235",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b576ba68-df6a-448e-b89f-124ae20b4f2a",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "630e4291-aff6-431a-aeee-b982e661e638"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "13373d32-d677-4b82-aaa3-99ee78659e07",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "ceff4ec8-089b-48a9-8363-dd464c6bc74d"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62497a94-17bf-4c72-b677-3f6562f5347f",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8fa02ccf-0329-4e83-b112-e57261f16dfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "0eb076bf-e51a-4e14-89b4-544c708e2f90"
                  }
                }
              ]
            },
            {
              "id": "d84d5a91-a124-45cf-84b9-7ed68acbef57",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a405f982-1c74-4611-8b07-8c32b261fdf9",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "129143ce-f7d4-497e-9199-2d738245f09d"
                  }
                }
              ]
            },
            {
              "id": "8e503ac0-10fa-43ea-953b-d1b9bf68d231",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c90b66a-ca27-4508-8791-e0ed0a2ad94f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "4b8bc8bd-b474-44b1-b85b-e3e5c34a220c"
                  }
                }
              ]
            },
            {
              "id": "a32c4b43-f92e-4e71-a052-77ec3e437e8a",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f7b14-bf6e-4f10-872f-e4ea44a527d2",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "57bf9ac9-73d5-4c5f-ba92-579e1e407a40"
                  }
                }
              ]
            },
            {
              "id": "6bfb476d-9ab2-4ff5-b31d-175069f43952",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77686487-2c23-41fa-af24-aa3ac44f719d",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "2974266f-4dc7-4c64-8e00-9d5cc25a72c3",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8361ffd6-3dfd-47e5-a741-d4cba62df680",
          "scriptId": "77686487-2c23-41fa-af24-aa3ac44f719d",
          "execution": "2563c368-30d6-47bb-ab0d-cb137dda00c6"
        }
      }
    ],
    "error": null
  }
}