{
  "collection": {
    "_": {
      "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
      "exporter_id": "25346390"
    },
    "item": [
      {
        "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
        "name": "DemoRequest",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [
              {
                "key": "page",
                "value": "2"
              }
            ],
            "variable": []
          },
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "\r",
                "//let jsonvariable =JSON.parse(responseBody);\r",
                "//const jsonvariaable = JSON.parse(responseBody);\r",
                "\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "0d3143db-3558-4055-918a-d729d76bf643",
              "type": "text/javascript",
              "exec": [
                "console.log(\"Pre-Request Script\");\r",
                "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                "pm.variables.set(\"LocalVariable\",\"in\")\r",
                ""
              ],
              "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      },
      {
        "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
        "name": "Unique_user_Request",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "9"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
            }
          }
        ]
      },
      {
        "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
        "name": "Post_method",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "23"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
            }
          }
        ]
      },
      {
        "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
        "name": "PUT_method",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "188ce443-e2fb-4475-ab84-b5495145835d",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
            }
          }
        ]
      },
      {
        "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
        "name": "patch_Request",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f77edade-c1f2-4410-8605-c35831cf064f",
              "type": "text/javascript",
              "exec": [
                "var jsonvariable = JSON.parse(responseBody);\r",
                "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "console.log(jsonvariable.total);\r",
                "console.log(jsonvariable.page);\r",
                "console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                "\r",
                " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "pm.test(\"status code validation API Testing\",function() {\r",
                "    pm.response.to.have.status == 200;\r",
                "});\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "pm.test(\"validate the response code\",()=>{\r",
                "    pm.response.to.have.status ==200;\r",
                "});\r",
                "\r",
                "\r",
                "\r",
                "pm.test(\"Content- Encoding validation\",function(){\r",
                "    pm.response.to .have.header(\"Content-Encoding\");\r",
                "});\r",
                "\r",
                "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "});\r",
                "pm.test(\"validate the cookies value\",()=>{\r",
                "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "});\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
            }
          }
        ]
      },
      {
        "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
        "name": "Delete_Request",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "7"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
              "type": "text/javascript",
              "exec": [
                "// var jsonvariable = JSON.parse(responseBody);\r",
                "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                "// console.log(jsonvariable.total);\r",
                "// console.log(jsonvariable.page);\r",
                "// console.log(jsonvariable.per_page);\r",
                "\r",
                "\r",
                "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                "\r",
                "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                "\r",
                "// pm.test(\"status code validation API Testing\",function() {\r",
                "//     pm.response.to.have.status == 200;\r",
                "// });\r",
                "pm.test(\"validate the code\",()=>{\r",
                "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                "});\r",
                "\r",
                "pm.test(\"validate the header\",()=>{\r",
                "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                "})\r",
                "\r",
                "\r",
                "// pm.test(\"validate the response code\",()=>{\r",
                "//     pm.response.to.have.status ==200;\r",
                "// });\r",
                "\r",
                "\r",
                "\r",
                "// pm.test(\"Content- Encoding validation\",function(){\r",
                "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                "// });\r",
                "\r",
                "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                "// });\r",
                "// // pm.test(\"validate the cookies value\",()=>{\r",
                "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                "// });\r",
                "\r",
                "\r",
                "pm.test(\"validate the response time\",function(){\r",
                "    pm.expect(pm.response.responseTime).to.above(50);\r",
                "})"
              ],
              "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "DomainClloectionvariable"
      },
      {
        "type": "any",
        "value": "",
        "key": "total_pages"
      }
    ],
    "info": {
      "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
      "name": "Collection_level_Runner",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "fd0eaebf-0029-433a-a26c-c3a0ed541372",
    "values": []
  },
  "globals": {
    "id": "85ebbe40-c9e6-491b-813b-f237dfc1df56",
    "values": [
      {
        "type": "any",
        "value": "https",
        "key": "URLGlobalVariable"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 13
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1259.6666666666667,
      "responseMin": 719,
      "responseMax": 1927,
      "responseSd": 517.3701662145672,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701617304123,
      "completed": 1701617312403
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d9e8419a-01c9-4d5b-be34-082c5763bcf8",
          "httpRequestId": "e7eb3874-5d3f-41c7-bd0d-a6663c0a3ba8"
        },
        "item": {
          "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
          "name": "DemoRequest",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "\r",
                  "//let jsonvariable =JSON.parse(responseBody);\r",
                  "//const jsonvariaable = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0d3143db-3558-4055-918a-d729d76bf643",
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Pre-Request Script\");\r",
                  "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                  "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                  "pm.variables.set(\"LocalVariable\",\"in\")\r",
                  ""
                ],
                "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [
              {
                "key": "page",
                "value": "2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "57fa7a41-a54e-439b-96e5-39c03836e360",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": {
          "id": "ffd24f83-6572-4ce8-824e-57f5fa44d89f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 03 Dec 2023 15:28:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701358400&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=GhkoBRwcau3hrX3aTxSa20%2Fh2tu7tLG3pbAOqicakPU%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701358400&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=GhkoBRwcau3hrX3aTxSa20%2Fh2tu7tLG3pbAOqicakPU%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"406-ut0vzoCuidvyMf8arZpMpJ6ZRDw\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "CF-Cache-Status",
              "value": "HIT"
            },
            {
              "key": "Age",
              "value": "3164"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "82fcd6dc2b1a5470-DEL"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              50,
              44,
              34,
              112,
              101,
              114,
              95,
              112,
              97,
              103,
              101,
              34,
              58,
              54,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              95,
              112,
              97,
              103,
              101,
              115,
              34,
              58,
              50,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              109,
              105,
              99,
              104,
              97,
              101,
              108,
              46,
              108,
              97,
              119,
              115,
              111,
              110,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              104,
              97,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              97,
              119,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              55,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              56,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              108,
              105,
              110,
              100,
              115,
              97,
              121,
              46,
              102,
              101,
              114,
              103,
              117,
              115,
              111,
              110,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              100,
              115,
              97,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              101,
              114,
              103,
              117,
              115,
              111,
              110,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              56,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              111,
              98,
              105,
              97,
              115,
              46,
              102,
              117,
              110,
              107,
              101,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              111,
              98,
              105,
              97,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              117,
              110,
              107,
              101,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              57,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              48,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              98,
              121,
              114,
              111,
              110,
              46,
              102,
              105,
              101,
              108,
              100,
              115,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              121,
              114,
              111,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              115,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              48,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              49,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              103,
              101,
              111,
              114,
              103,
              101,
              46,
              101,
              100,
              119,
              97,
              114,
              100,
              115,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              101,
              111,
              114,
              103,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              100,
              119,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              49,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              50,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              114,
              97,
              99,
              104,
              101,
              108,
              46,
              104,
              111,
              119,
              101,
              108,
              108,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              97,
              99,
              104,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              111,
              119,
              101,
              108,
              108,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              50,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              35,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              45,
              104,
              101,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              111,
              32,
              107,
              101,
              101,
              112,
              32,
              82,
              101,
              113,
              82,
              101,
              115,
              32,
              102,
              114,
              101,
              101,
              44,
              32,
              99,
              111,
              110,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              119,
              97,
              114,
              100,
              115,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              99,
              111,
              115,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              114,
              101,
              99,
              105,
              97,
              116,
              101,
              100,
              33,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1927,
          "responseSize": 1030
        },
        "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:1)"
            }
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8bf81f6f-3900-427c-9ae0-a8e84910003f",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d55f9ae9-92ce-4432-a487-9dcf0b305a94"
        },
        "item": {
          "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
          "name": "Unique_user_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "9"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "9"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "974c1d1b-0e6f-4bc0-935e-93e2217163e9",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c1c5f8fa-1721-4168-b011-b7837e5da713",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 03 Dec 2023 15:28:25 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701616839&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=uc0Ctkpj1nygsrLvLQlI3DbWGo5dmHENkF8xrp%2BwnTc%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701616839&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=uc0Ctkpj1nygsrLvLQlI3DbWGo5dmHENkF8xrp%2BwnTc%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"118-h4/j+GWuEpfnmJgxhE5HWX+/QC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "CF-Cache-Status",
              "value": "HIT"
            },
            {
              "key": "Age",
              "value": "466"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "82fcd6df28d25470-DEL"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              111,
              98,
              105,
              97,
              115,
              46,
              102,
              117,
              110,
              107,
              101,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              111,
              98,
              105,
              97,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              117,
              110,
              107,
              101,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              57,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              35,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              45,
              104,
              101,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              111,
              32,
              107,
              101,
              101,
              112,
              32,
              82,
              101,
              113,
              82,
              101,
              115,
              32,
              102,
              114,
              101,
              101,
              44,
              32,
              99,
              111,
              110,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              119,
              97,
              114,
              100,
              115,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              99,
              111,
              115,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              114,
              101,
              99,
              105,
              97,
              116,
              101,
              100,
              33,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1599,
          "responseSize": 280
        },
        "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:2)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b7abf21-4e9d-42e4-a8af-ee4baf9b9532",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05b90d4f-37a8-4680-9b46-1ec477c6834f"
        },
        "item": {
          "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "23"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "82bdad9e-e4b9-4e14-8167-894a5a34acd9",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "8978b9db-daec-420e-8a69-062b2f297212",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 03 Dec 2023 15:28:27 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "87"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701617307&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=nxeAWT0TpE5awuDRWRkWeVPk%2FFMsn8r4zNFVv9RQuyU%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701617307&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=nxeAWT0TpE5awuDRWRkWeVPk%2FFMsn8r4zNFVv9RQuyU%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"57-guDXLt19lVQk+LrOsGWX/4EC3DE\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "82fcd6e9a81d5470-DEL"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              97,
              118,
              101,
              101,
              110,
              34,
              44,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              51,
              55,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              50,
              45,
              48,
              51,
              84,
              49,
              53,
              58,
              50,
              56,
              58,
              50,
              55,
              46,
              51,
              54,
              56,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1776,
          "responseSize": 87
        },
        "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Content- Encoding validation",
              "message": "expected response to have header with key 'Content-Encoding'",
              "stack": "AssertionError: expected response to have header with key 'Content-Encoding'\n   at Object.eval sandbox-script.js:5:3)"
            }
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "validate the Content-Encoding value",
              "message": "expected undefined to deeply equal 'br'",
              "stack": "AssertionError: expected undefined to deeply equal 'br'\n   at Object.eval sandbox-script.js:6:3)"
            }
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:3)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Validate the Status Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:3)"
            }
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "59a3f0b7-82e1-4fd5-889e-72b15fcca66b",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c7b5943-0646-4ef2-a4a9-a6fe7eb07600"
        },
        "item": {
          "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
          "name": "PUT_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e44d21d9-2de3-4fbf-aafe-aced9fa6c3f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "60",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "117cccd8-af8c-416b-a9a2-a01409490416",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 03 Dec 2023 15:28:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701617309&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=oPitXCXu%2FmEeouBAfGoiyO1Y%2F0YSGVEHIbJYU2laFyY%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701617309&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=oPitXCXu%2FmEeouBAfGoiyO1Y%2F0YSGVEHIbJYU2laFyY%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"53-ExEY5vUwz4dTzWompo7+wUOtucU\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "82fcd6f5a9465470-DEL"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              97,
              118,
              101,
              101,
              110,
              34,
              44,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              65,
              117,
              116,
              111,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              50,
              45,
              48,
              51,
              84,
              49,
              53,
              58,
              50,
              56,
              58,
              50,
              57,
              46,
              51,
              50,
              51,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 814,
          "responseSize": 83
        },
        "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:4)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5bc5a71-69e9-49b8-a8b0-8879ba99c401",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "083985e6-6a86-424c-bb66-869897d730c5"
        },
        "item": {
          "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
          "name": "patch_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "139"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6ef5308-f634-4364-b280-140f709e20e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "33",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e7d45d32-8849-4855-914f-d6e54c2d1e5e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 03 Dec 2023 15:28:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701617310&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=4VGy2qNoYDw9SgY%2BwOMiwktYNuJq5LATRK7np1f37U0%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701617310&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=4VGy2qNoYDw9SgY%2BwOMiwktYNuJq5LATRK7np1f37U0%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"3f-CLdTNyWMqxASB3IuQu7T+HSt1Jk\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "82fcd6fb3cfc5470-DEL"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              109,
              97,
              110,
              117,
              97,
              108,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              50,
              45,
              48,
              51,
              84,
              49,
              53,
              58,
              50,
              56,
              58,
              51,
              48,
              46,
              50,
              48,
              57,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 719,
          "responseSize": 63
        },
        "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
        "assertions": [
          {
            "assertion": "status code validation API Testing",
            "skipped": false
          },
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false
          },
          {
            "assertion": "validate the response code",
            "skipped": false
          },
          {
            "assertion": "Content- Encoding validation",
            "skipped": false
          },
          {
            "assertion": "validate the Content-Encoding value",
            "skipped": false
          },
          {
            "assertion": "validate the cookies value",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "validate the cookies value",
              "message": "expected undefined to deeply equal 'api'",
              "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:5)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          },
          {
            "assertion": "checkingStatus Code",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "checkingStatus Code",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e6b6f9a0-4ed1-460c-b0fe-42c0f753fed6",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "838e0ef9-8e6a-4f07-b8c7-d3cde7a2f02e"
        },
        "item": {
          "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
          "name": "Delete_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "7"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                "type": "text/javascript",
                "exec": [
                  "// var jsonvariable = JSON.parse(responseBody);\r",
                  "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "// console.log(jsonvariable.total);\r",
                  "// console.log(jsonvariable.page);\r",
                  "// console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                  "\r",
                  "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "// pm.test(\"status code validation API Testing\",function() {\r",
                  "//     pm.response.to.have.status == 200;\r",
                  "// });\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "// pm.test(\"validate the response code\",()=>{\r",
                  "//     pm.response.to.have.status ==200;\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "\r",
                  "// pm.test(\"Content- Encoding validation\",function(){\r",
                  "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "// });\r",
                  "// // pm.test(\"validate the cookies value\",()=>{\r",
                  "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "7"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "747452da-c601-4a44-9802-cb698202a392",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "b049bd23-6c71-4577-b4f4-9cb793a86a1c",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 03 Dec 2023 15:28:31 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1701617311&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=dGFc1LROFOY18J%2FQ8nFTMVxeQRb4AzHNvjkUSB%2BnVzc%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1701617311&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=dGFc1LROFOY18J%2FQ8nFTMVxeQRb4AzHNvjkUSB%2BnVzc%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "82fcd7006f385470-DEL"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 723,
          "responseSize": 0
        },
        "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
        "assertions": [
          {
            "assertion": "validate the code",
            "skipped": false
          },
          {
            "assertion": "validate the header",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "validate the header",
              "message": "expected undefined to deeply equal 'application/json; charset=utf-8'",
              "stack": "AssertionError: expected undefined to deeply equal 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "validate the response time",
            "skipped": false
          },
          {
            "assertion": "Validate the Status Code",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1543
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:1)",
          "checksum": "e4cdd3a64bc58d7030a83465339ec173",
          "id": "a0eeced9-4a27-4e53-a8ce-69bd572eea6d",
          "timestamp": 1701617306144,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
          "name": "DemoRequest",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "\r",
                  "//let jsonvariable =JSON.parse(responseBody);\r",
                  "//const jsonvariaable = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0d3143db-3558-4055-918a-d729d76bf643",
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Pre-Request Script\");\r",
                  "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                  "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                  "pm.variables.set(\"LocalVariable\",\"in\")\r",
                  ""
                ],
                "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d9e8419a-01c9-4d5b-be34-082c5763bcf8",
          "httpRequestId": "e7eb3874-5d3f-41c7-bd0d-a6663c0a3ba8",
          "scriptId": "853e10f1-9ba4-4c69-92bc-747217d1e644",
          "execution": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:1)",
          "checksum": "cedf0163b51420fc23550f94708897da",
          "id": "5c6afc94-e63d-41ea-af22-709975aed90d",
          "timestamp": 1701617306147,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
          "name": "DemoRequest",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "\r",
                  "//let jsonvariable =JSON.parse(responseBody);\r",
                  "//const jsonvariaable = JSON.parse(responseBody);\r",
                  "\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0d3143db-3558-4055-918a-d729d76bf643",
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Pre-Request Script\");\r",
                  "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                  "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                  "pm.variables.set(\"LocalVariable\",\"in\")\r",
                  ""
                ],
                "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d9e8419a-01c9-4d5b-be34-082c5763bcf8",
          "httpRequestId": "e7eb3874-5d3f-41c7-bd0d-a6663c0a3ba8",
          "scriptId": "853e10f1-9ba4-4c69-92bc-747217d1e644",
          "execution": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:2)",
          "checksum": "91f532fcf65ce897ad665f78ae2987fc",
          "id": "c6bfa829-d1dd-4664-b0a8-1f538d83e071",
          "timestamp": 1701617307846,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
          "name": "Unique_user_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "9"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8bf81f6f-3900-427c-9ae0-a8e84910003f",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d55f9ae9-92ce-4432-a487-9dcf0b305a94",
          "scriptId": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
          "execution": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:2)",
          "checksum": "ed7524a926d518d6a33bdd404826ddb0",
          "id": "e8c30ff8-fa00-48e2-a161-c21a8268a59d",
          "timestamp": 1701617307848,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
          "name": "Unique_user_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "9"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8bf81f6f-3900-427c-9ae0-a8e84910003f",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d55f9ae9-92ce-4432-a487-9dcf0b305a94",
          "scriptId": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
          "execution": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Content- Encoding validation",
          "message": "expected response to have header with key 'Content-Encoding'",
          "stack": "AssertionError: expected response to have header with key 'Content-Encoding'\n   at Object.eval sandbox-script.js:5:3)",
          "checksum": "d900a3395f2ba2b825c0aecb3c80c822",
          "id": "1348df1a-b692-4e81-9e4d-ad163f59f3da",
          "timestamp": 1701617309733,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "0b7abf21-4e9d-42e4-a8af-ee4baf9b9532",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05b90d4f-37a8-4680-9b46-1ec477c6834f",
          "scriptId": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
          "execution": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "validate the Content-Encoding value",
          "message": "expected undefined to deeply equal 'br'",
          "stack": "AssertionError: expected undefined to deeply equal 'br'\n   at Object.eval sandbox-script.js:6:3)",
          "checksum": "8c7d8933680777402b36a3b4be36d814",
          "id": "8b700a8d-958f-4289-a450-134fc83bc214",
          "timestamp": 1701617309735,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "0b7abf21-4e9d-42e4-a8af-ee4baf9b9532",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05b90d4f-37a8-4680-9b46-1ec477c6834f",
          "scriptId": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
          "execution": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:3)",
          "checksum": "3a6dfa8008a1faf5424716ce71aef86e",
          "id": "e64133af-ea9f-4993-bff3-76324cc3e62f",
          "timestamp": 1701617309736,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "0b7abf21-4e9d-42e4-a8af-ee4baf9b9532",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05b90d4f-37a8-4680-9b46-1ec477c6834f",
          "scriptId": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
          "execution": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Validate the Status Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:9:3)",
          "checksum": "144c027096a24e67757b1f10cb0bf11a",
          "id": "f137d4a6-adbc-4c14-b7ff-e0ebca59ccf0",
          "timestamp": 1701617309737,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
          "name": "Post_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "23"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "0b7abf21-4e9d-42e4-a8af-ee4baf9b9532",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05b90d4f-37a8-4680-9b46-1ec477c6834f",
          "scriptId": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
          "execution": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:4)",
          "checksum": "8163ac6647a5f6b3861fdce20c0511f0",
          "id": "3a5a01c4-3074-496c-b928-a4e8257f88cc",
          "timestamp": 1701617310649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
          "name": "PUT_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "59a3f0b7-82e1-4fd5-889e-72b15fcca66b",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c7b5943-0646-4ef2-a4a9-a6fe7eb07600",
          "scriptId": "188ce443-e2fb-4475-ab84-b5495145835d",
          "execution": "71251782-0d75-44fe-9000-00896537133c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:4)",
          "checksum": "5d64a80bcb6d2f90999e246a20e532f3",
          "id": "edf7ebd2-f77b-484e-a01c-545ae8fa0ece",
          "timestamp": 1701617310651,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
          "name": "PUT_method",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "59a3f0b7-82e1-4fd5-889e-72b15fcca66b",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9c7b5943-0646-4ef2-a4a9-a6fe7eb07600",
          "scriptId": "188ce443-e2fb-4475-ab84-b5495145835d",
          "execution": "71251782-0d75-44fe-9000-00896537133c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "validate the cookies value",
          "message": "expected undefined to deeply equal 'api'",
          "stack": "AssertionError: expected undefined to deeply equal 'api'\n   at Object.eval sandbox-script.js:7:5)",
          "checksum": "ea7cbdcfa0e3e7847c32f32b84f34efb",
          "id": "2b8024b0-fad5-41bc-bb84-a01e70e770e6",
          "timestamp": 1701617311500,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
          "name": "patch_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "d5bc5a71-69e9-49b8-a8b0-8879ba99c401",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "083985e6-6a86-424c-bb66-869897d730c5",
          "scriptId": "f77edade-c1f2-4410-8605-c35831cf064f",
          "execution": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "checkingStatus Code",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:10:5)",
          "checksum": "6b8d4ca734d1307b6d13072f55b40a28",
          "id": "0d5287df-f268-4c39-b5ba-db8e2657d9f7",
          "timestamp": 1701617311503,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
          "name": "patch_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "139"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                "type": "text/javascript",
                "exec": [
                  "var jsonvariable = JSON.parse(responseBody);\r",
                  "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "console.log(jsonvariable.total);\r",
                  "console.log(jsonvariable.page);\r",
                  "console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                  "\r",
                  " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "pm.test(\"status code validation API Testing\",function() {\r",
                  "    pm.response.to.have.status == 200;\r",
                  "});\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response code\",()=>{\r",
                  "    pm.response.to.have.status ==200;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Content- Encoding validation\",function(){\r",
                  "    pm.response.to .have.header(\"Content-Encoding\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "});\r",
                  "pm.test(\"validate the cookies value\",()=>{\r",
                  "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "d5bc5a71-69e9-49b8-a8b0-8879ba99c401",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "083985e6-6a86-424c-bb66-869897d730c5",
          "scriptId": "f77edade-c1f2-4410-8605-c35831cf064f",
          "execution": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "validate the header",
          "message": "expected undefined to deeply equal 'application/json; charset=utf-8'",
          "stack": "AssertionError: expected undefined to deeply equal 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d6c237421abe4af9023f4c21de3bfc9e",
          "id": "b79b198d-0279-42eb-bec6-08b6f2b9f9b2",
          "timestamp": 1701617312347,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
          "name": "Delete_Request",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "users",
                "7"
              ],
              "host": [
                "reqres",
                "in"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                "type": "text/javascript",
                "exec": [
                  "// var jsonvariable = JSON.parse(responseBody);\r",
                  "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                  "// console.log(jsonvariable.total);\r",
                  "// console.log(jsonvariable.page);\r",
                  "// console.log(jsonvariable.per_page);\r",
                  "\r",
                  "\r",
                  "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                  "\r",
                  "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                  "\r",
                  "// pm.test(\"status code validation API Testing\",function() {\r",
                  "//     pm.response.to.have.status == 200;\r",
                  "// });\r",
                  "pm.test(\"validate the code\",()=>{\r",
                  "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"validate the header\",()=>{\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                  "})\r",
                  "\r",
                  "\r",
                  "// pm.test(\"validate the response code\",()=>{\r",
                  "//     pm.response.to.have.status ==200;\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "\r",
                  "// pm.test(\"Content- Encoding validation\",function(){\r",
                  "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                  "// });\r",
                  "\r",
                  "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                  "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                  "// });\r",
                  "// // pm.test(\"validate the cookies value\",()=>{\r",
                  "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                  "// });\r",
                  "\r",
                  "\r",
                  "pm.test(\"validate the response time\",function(){\r",
                  "    pm.expect(pm.response.responseTime).to.above(50);\r",
                  "})"
                ],
                "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "exporter_id": "25346390"
          },
          "item": [
            {
              "id": "773687fa-6ae5-4988-9d4d-f83b1a96807c",
              "name": "DemoRequest",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "853e10f1-9ba4-4c69-92bc-747217d1e644",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "\r",
                      "//let jsonvariable =JSON.parse(responseBody);\r",
                      "//const jsonvariaable = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e68a54f0-d29c-4c83-acfe-d59f8dc8ca89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0d3143db-3558-4055-918a-d729d76bf643",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(\"Pre-Request Script\");\r",
                      "pm.globals.set(\"URLGlobalVariable\",\"https\");\r",
                      "pm.collectionVariables.set(\"DomainClloectionvariable\",\"reqres\")\r",
                      "pm.variables.set(\"LocalVariable\",\"in\")\r",
                      ""
                    ],
                    "_lastExecutionId": "1d3fb7df-6eaa-4c4c-884b-d888e2e36bc4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "68f63564-c236-4088-8647-47b7f0e1e9c0",
              "name": "Unique_user_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "9"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bbcf142-ea48-4d2e-a52b-26d543fa7968",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "a708c65c-aeeb-4aea-944a-eb24ce393bc1"
                  }
                }
              ]
            },
            {
              "id": "aa0ea928-c6d5-4fba-80b3-b15ce27d63c3",
              "name": "Post_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "23"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"API Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6858cd67-c7a9-4d2a-98e6-fb298be1c228",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "bd5890fb-1c88-4398-8e8d-e66f1261c92f"
                  }
                }
              ]
            },
            {
              "id": "b8c6b505-cd65-4706-b4d1-b4b0eb5f38e3",
              "name": "PUT_method",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"Naveen\",\r\n    \"job\": \"Automation Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "188ce443-e2fb-4475-ab84-b5495145835d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "71251782-0d75-44fe-9000-00896537133c"
                  }
                }
              ]
            },
            {
              "id": "b3b7d040-6ccb-4eaf-b56d-8370191d575c",
              "name": "patch_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "139"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"job\": \"manual Testing\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f77edade-c1f2-4410-8605-c35831cf064f",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonvariable = JSON.parse(responseBody);\r",
                      "pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "console.log(jsonvariable.total);\r",
                      "console.log(jsonvariable.page);\r",
                      "console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 200;\r",
                      "\r",
                      " tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "pm.test(\"status code validation API Testing\",function() {\r",
                      "    pm.response.to.have.status == 200;\r",
                      "});\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response code\",()=>{\r",
                      "    pm.response.to.have.status ==200;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content- Encoding validation\",function(){\r",
                      "    pm.response.to .have.header(\"Content-Encoding\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "   pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "});\r",
                      "pm.test(\"validate the cookies value\",()=>{\r",
                      "   pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "032584bf-c3c7-4682-ae92-fd317fcea2d7"
                  }
                }
              ]
            },
            {
              "id": "b2dd94ca-8159-4636-a6e8-2360d76b234d",
              "name": "Delete_Request",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users",
                    "7"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
                    "type": "text/javascript",
                    "exec": [
                      "// var jsonvariable = JSON.parse(responseBody);\r",
                      "// pm.collectionVariables.set(\"total_pages\",jsonvariable.total)\r",
                      "// console.log(jsonvariable.total);\r",
                      "// console.log(jsonvariable.page);\r",
                      "// console.log(jsonvariable.per_page);\r",
                      "\r",
                      "\r",
                      "tests[\"Validate the Status Code\"]= responseCode.code == 204;\r",
                      "\r",
                      "// tests[\"checkingStatus Code\"]=responseCode.code== 201;\r",
                      "\r",
                      "// pm.test(\"status code validation API Testing\",function() {\r",
                      "//     pm.response.to.have.status == 200;\r",
                      "// });\r",
                      "pm.test(\"validate the code\",()=>{\r",
                      "    pm.expect(pm.response.code).to.oneOf([200,201,204]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"validate the header\",()=>{\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')\r",
                      "})\r",
                      "\r",
                      "\r",
                      "// pm.test(\"validate the response code\",()=>{\r",
                      "//     pm.response.to.have.status ==200;\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Content- Encoding validation\",function(){\r",
                      "//     pm.response.to .have.header(\"Content-Encoding\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"validate the Content-Encoding value\",()=>{\r",
                      "//    pm.expect(pm.response.headers.get('Content-Encoding')).to.eql('br');\r",
                      "// });\r",
                      "// // pm.test(\"validate the cookies value\",()=>{\r",
                      "//    pm.expect(pm.response.cookies.get('testing')).to.eql('api');\r",
                      "// });\r",
                      "\r",
                      "\r",
                      "pm.test(\"validate the response time\",function(){\r",
                      "    pm.expect(pm.response.responseTime).to.above(50);\r",
                      "})"
                    ],
                    "_lastExecutionId": "605b305f-0159-49d5-8aea-38f23f6b29b4"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "DomainClloectionvariable"
            },
            {
              "type": "any",
              "value": "",
              "key": "total_pages"
            }
          ],
          "info": {
            "_postman_id": "3671b384-081e-43cd-bc87-a1835f2302a1",
            "name": "Collection_level_Runner",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "e6b6f9a0-4ed1-460c-b0fe-42c0f753fed6",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "838e0ef9-8e6a-4f07-b8c7-d3cde7a2f02e",
          "scriptId": "6132b961-7a1c-4b95-a02d-5d3486aa5d83",
          "execution": "605b305f-0159-49d5-8aea-38f23f6b29b4"
        }
      }
    ],
    "error": null
  }
}